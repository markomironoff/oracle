#!/bin/bash
# oracle_datapatch_runner.sh
# Run datapatch on all running Oracle databases (excluding ASM)
# Author: Marko Mironoff
# Date: 18.9 2025
# Version: 1.0
# Fully supports CDB/PDB for utlrp, invalid object counts, and latest patches

# Change log:
# Version    Date        Author          Details
# 0.1        17.9 2025   ChatGPT AI      First draft
# 0.2        17.9 2025   ChatGPT AI      Added latest patch/timestamp check
# 0.3        17.9 2025   ChatGPT AI      Show all patches from the last run
# 0.4        17.9 2025   ChatGPT AI      Fixed phantom "sed" issue + ORACLE_HOME safety check
# 0.5        17.9 2025   ChatGPT AI      Added PDB utlrp + invalid object count if CDB
# 0.6        17.9 2025   ChatGPT AI      Run PDB utlrp.sql via SQL*Plus, not inside PL/SQL
# 0.7        17.9 2025   ChatGPT AI      Fixed CDB detection bug and trimmed SQL*Plus output
# 0.8        17.9 2025   ChatGPT AI      Added patch history per PDB
# 0.9        18.9 2025   ChatGPT AI      Added summary at end
# 1.0        18.9 2025   Marko Mironoff  Human Lab tested version

LOGFILE="/tmp/oracle_datapatch_runner_$(date +%Y%m%d_%H%M%S).log"
echo "==== Oracle Datapatch Runner started at $(date) ====" | tee -a $LOGFILE

export ORACLE_BASE=/u01/app/oracle
SUMMARY_SUCCESS=()
SUMMARY_FAILED=()

# Find running DB instances (exclude ASM)
#DB_LIST=$(ps -ef | grep [o]ra_smon_ | grep -v ASM | awk -F_ '{print $3"_"$4}' | sort)
DB_LIST=$(ps -ef | grep [o]ra_smon_ | grep -v ASM | awk -F_ '{if($4) print $3"_"$4; else print $3}' | sort)

if [ -z "$DB_LIST" ]; then
  echo "No running Oracle databases found." | tee -a $LOGFILE
  exit 1
fi

echo "Databases found: $DB_LIST" | tee -a $LOGFILE

for DB in $DB_LIST; do
  export ORACLE_SID=$DB
  ORACLE_HOME=$(grep -E "^${ORACLE_SID}:" /etc/oratab | cut -d: -f2)

  if [ -z "$ORACLE_HOME" ]; then
    echo "WARNING: ORACLE_HOME not found in /etc/oratab for $ORACLE_SID. Skipping..." | tee -a $LOGFILE
    SUMMARY_FAILED+=("$ORACLE_SID (no ORACLE_HOME)")
    continue
  fi

  export ORACLE_HOME
  export PATH=$ORACLE_HOME/OPatch:$ORACLE_HOME/bin:/usr/bin:/bin

  echo "---- Running datapatch on $ORACLE_SID (ORACLE_HOME=$ORACLE_HOME) ----" | tee -a $LOGFILE
  $ORACLE_HOME/OPatch/datapatch -verbose >> $LOGFILE 2>&1

  if [ $? -eq 0 ]; then
    echo "Datapatch completed successfully for $ORACLE_SID" | tee -a $LOGFILE
    SUMMARY_SUCCESS+=("$ORACLE_SID")
  else
    echo "Datapatch FAILED for $ORACLE_SID. Check logs." | tee -a $LOGFILE
    SUMMARY_FAILED+=("$ORACLE_SID")
    continue
  fi

  # Run utlrp in CDB
  echo "Compiling invalid objects in $ORACLE_SID (CDB)..." | tee -a $LOGFILE
  $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF >> $LOGFILE
whenever sqlerror exit sql.sqlcode
@?/rdbms/admin/utlrp.sql
exit
EOF

  # Count invalid objects in CDB
  echo "Counting invalid objects in $ORACLE_SID (CDB)..." | tee -a $LOGFILE
  $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF >> $LOGFILE
set heading off feedback off
select count(*) as invalid_objects from dba_objects where status='INVALID';
exit
EOF

  # Check if CDB
  IS_CDB=$($ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
set heading off feedback off verify off pagesize 0
select cdb from v\$database;
exit
EOF
)
  IS_CDB=$(echo "$IS_CDB" | tr -d '[:space:]')

  if [[ "$IS_CDB" == "YES" ]]; then
    echo "Database $ORACLE_SID is a CDB. Running utlrp, invalid count, and patch history in PDBs..." | tee -a $LOGFILE

    # Get list of open PDBs (excluding PDB$SEED)
    PDB_LIST=$($ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
set heading off feedback off verify off pagesize 0
select name from v\$pdbs where open_mode='READ WRITE' and name not in ('PDB\$SEED');
exit
EOF
)

    for PDB in $PDB_LIST; do
      echo "Running utlrp in PDB: $PDB" | tee -a $LOGFILE
      $ORACLE_HOME/bin/sqlplus / as sysdba <<EOF >> $LOGFILE
alter session set container=$PDB;
@?/rdbms/admin/utlrp.sql
exit
EOF

      echo "Counting invalid objects in PDB: $PDB" | tee -a $LOGFILE
      $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF >> $LOGFILE
alter session set container=$PDB;
set heading on feedback on
col pdb_name for a20
col invalid_objects for 999999
select '$PDB' as pdb_name, count(*) as invalid_objects
from dba_objects
where status='INVALID';
exit
EOF

      echo "Checking patches applied in last run for PDB: $PDB" | tee -a $LOGFILE
      $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF >> $LOGFILE
alter session set container=$PDB;
set lines 200 pages 100
col action_time for a30
col status for a10
col description for a60
prompt === Patches applied in last datapatch run for $PDB ===
select action_time, status, description
from dba_registry_sqlpatch
where action = 'APPLY'
  and action_time = (select max(action_time)
                     from dba_registry_sqlpatch
                     where action='APPLY');
exit
EOF
    done
  else
    echo "Database $ORACLE_SID is not a CDB." | tee -a $LOGFILE
  fi

  # Show all patches from the last run in CDB/root
  echo "Checking patches applied in last run for $ORACLE_SID (CDB/Root)..." | tee -a $LOGFILE
  $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF >> $LOGFILE
set lines 200 pages 100
col action_time for a30
col status for a10
col description for a60
prompt === Patches applied in last datapatch run for $ORACLE_SID (CDB/Root) ===
select action_time, status, description
from dba_registry_sqlpatch
where action = 'APPLY'
  and action_time = (select max(action_time)
                     from dba_registry_sqlpatch
                     where action='APPLY');
exit
EOF

  echo "---- Finished $ORACLE_SID ----" | tee -a $LOGFILE
done

echo "==== Oracle Datapatch Runner finished at $(date) ====" | tee -a $LOGFILE

# Print summary
echo "" | tee -a $LOGFILE
echo "==== Summary (node $(hostname)) ====" | tee -a $LOGFILE
if [ ${#SUMMARY_SUCCESS[@]} -gt 0 ]; then
  echo "Patched successfully:" | tee -a $LOGFILE
  for db in "${SUMMARY_SUCCESS[@]}"; do
    echo "  - $db" | tee -a $LOGFILE
  done
fi

if [ ${#SUMMARY_FAILED[@]} -gt 0 ]; then
  echo "Failed or skipped:" | tee -a $LOGFILE
  for db in "${SUMMARY_FAILED[@]}"; do
    echo "  - $db" | tee -a $LOGFILE
  done
fi
echo "===============================" | tee -a $LOGFILE

# [oracle@oraclesrv ~]$ ./oracle_datapatch_runner.sh
# ==== Oracle Datapatch Runner started at Fri Sep 19 02:28:43 EDT 2025 ====
# Databases found: orcl_
# orcl2_
# WARNING: ORACLE_HOME not found in /etc/oratab for orcl_. Skipping...
# WARNING: ORACLE_HOME not found in /etc/oratab for orcl2_. Skipping...
# ==== Oracle Datapatch Runner finished at Fri Sep 19 02:28:44 EDT 2025 ====

# ==== Summary (node oraclesrv) ====
# Failed or skipped:
  # - orcl_ (no ORACLE_HOME)
  # - orcl2_ (no ORACLE_HOME)
# ===============================
# [oracle@oraclesrv ~]$ vi oracle_datapatch_runner.sh
# [oracle@oraclesrv ~]$ ./oracle_datapatch_runner.sh
# ==== Oracle Datapatch Runner started at Fri Sep 19 02:31:32 EDT 2025 ====
# Databases found: orcl
# orcl2
# ---- Running datapatch on orcl (ORACLE_HOME=/u01/app/oracle/product/19.0.0/db_1) ----
# Datapatch completed successfully for orcl
# Compiling invalid objects in orcl (CDB)...
# Counting invalid objects in orcl (CDB)...
# Database orcl is a CDB. Running utlrp, invalid count, and patch history in PDBs...
# Running utlrp in PDB: PDB1
# Counting invalid objects in PDB: PDB1
# Checking patches applied in last run for PDB: PDB1
# Checking patches applied in last run for orcl (CDB/Root)...
# ---- Finished orcl ----
# ---- Running datapatch on orcl2 (ORACLE_HOME=/u01/app/oracle/product/19.0.0/db_1) ----
# Datapatch FAILED for orcl2. Check logs.
# ==== Oracle Datapatch Runner finished at Fri Sep 19 02:35:34 EDT 2025 ====

# ==== Summary (node oraclesrv) ====
# Patched successfully:
  # - orcl
# Failed or skipped:
  # - orcl2
# ===============================

# [oracle@oraclesrv ~]$ less /tmp/oracle_datapatch_runner_20250919_023132.log
# ==== Oracle Datapatch Runner started at Fri Sep 19 02:31:32 EDT 2025 ====
# Databases found: orcl
# orcl2
# ---- Running datapatch on orcl (ORACLE_HOME=/u01/app/oracle/product/19.0.0/db_1) ----
# SQL Patching tool version 19.28.0.0.0 Production on Fri Sep 19 02:31:40 2025
# Copyright (c) 2012, 2025, Oracle.  All rights reserved.

# Log file for this invocation: /u01/app/oracle/cfgtoollogs/sqlpatch/sqlpatch_2887_2025_09_19_02_31_41/sqlpatch_invocation.log

# Connecting to database...OK
# Gathering database info...done

# Note:  Datapatch will only apply or rollback SQL fixes for PDBs
       # that are in an open state, no patches will be applied to closed PDBs.
       # Please refer to Note: Datapatch: Database 12c Post Patch SQL Automation
       # (Doc ID 1585822.1)

# Bootstrapping registry and package to current versions...done
# Determining current state...done

# Current state of interim SQL patches:
  # No interim patches found

# Current state of release update SQL patches:
  # Binary registry:
    # 19.28.0.0.0 Release_Update 250705030417: Installed
  # PDB CDB$ROOT:
    # Applied 19.28.0.0.0 Release_Update 250705030417 successfully on 19-AUG-25 07.46.19.998802 AM
  # PDB PDB$SEED:
    # Applied 19.28.0.0.0 Release_Update 250705030417 successfully on 19-AUG-25 08.34.00.361430 AM
  # PDB PDB1:
    # Applied 19.28.0.0.0 Release_Update 250705030417 successfully on 19-AUG-25 08.34.00.968406 AM

# Adding patches to installation queue and performing prereq checks...done
# Installation queue:
  # For the following PDBs: CDB$ROOT PDB$SEED PDB1
    # No interim patches need to be rolled back
    # No release update patches need to be installed
    # No interim patches need to be applied

# SQL Patching tool complete on Fri Sep 19 02:33:52 2025
# Datapatch completed successfully for orcl
# Compiling invalid objects in orcl (CDB)...

# Session altered.


# TIMESTAMP
# --------------------------------------------------------------------------------
# COMP_TIMESTAMP UTLRP_BGN              2025-09-19 02:33:53


# PL/SQL procedure successfully completed.


# TIMESTAMP
# --------------------------------------------------------------------------------
# COMP_TIMESTAMP UTLRP_END              2025-09-19 02:33:58


# OBJECTS WITH ERRORS
# -------------------
                  # 0


# ERRORS DURING RECOMPILATION
# ---------------------------
                          # 0


# Function created.


# PL/SQL procedure successfully completed.


# Function dropped.


# PL/SQL procedure successfully completed.

# Counting invalid objects in orcl (CDB)...

              # 0
# Database orcl is a CDB. Running utlrp, invalid count, and patch history in PDBs...
# Running utlrp in PDB: PDB1

# SQL*Plus: Release 19.0.0.0.0 - Production on Fri Sep 19 02:34:21 2025
# Version 19.28.0.0.0

# Copyright (c) 1982, 2025, Oracle.  All rights reserved.


# Connected to:
# Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
# Version 19.28.0.0.0

# SQL>
# Session altered.

# SQL>
# Session altered.
# TIMESTAMP
# --------------------------------------------------------------------------------
# COMP_TIMESTAMP UTLRP_BGN              2025-09-19 02:34:21

# DOC>   The following PL/SQL block invokes UTL_RECOMP to recompile invalid
# DOC>   objects in the database. Recompilation time is proportional to the
# DOC>   number of invalid objects in the database, so this command may take
# DOC>   a long time to execute on a database with a large number of invalid
# DOC>   objects.
# DOC>
# DOC>   Use the following queries to track recompilation progress:
# DOC>
# DOC>   1. Query returning the number of invalid objects remaining. This
# DOC>      number should decrease with time.
# DOC>         SELECT COUNT(*) FROM obj$ WHERE status IN (4, 5, 6);
# DOC>
# DOC>   2. Query returning the number of objects compiled so far. This number
# DOC>      should increase with time.
# DOC>         SELECT COUNT(*) FROM UTL_RECOMP_COMPILED;
# DOC>
# DOC>   This script automatically chooses serial or parallel recompilation
# DOC>   based on the number of CPUs available (parameter cpu_count) multiplied
# DOC>   by the number of threads per CPU (parameter parallel_threads_per_cpu).
# DOC>   On RAC, this number is added across all RAC nodes.
# DOC>
# DOC>   UTL_RECOMP uses DBMS_SCHEDULER to create jobs for parallel
# DOC>   recompilation. Jobs are created without instance affinity so that they
# DOC>   can migrate across RAC nodes. Use the following queries to verify
# DOC>   whether UTL_RECOMP jobs are being created and run correctly:
# DOC>
# DOC>   1. Query showing jobs created by UTL_RECOMP
# DOC>         SELECT job_name FROM dba_scheduler_jobs
# DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
# DOC>
# DOC>   2. Query showing UTL_RECOMP jobs that are running
# DOC>         SELECT job_name FROM dba_scheduler_running_jobs
# DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
# DOC>#

# PL/SQL procedure successfully completed.


# TIMESTAMP
# --------------------------------------------------------------------------------
# COMP_TIMESTAMP UTLRP_END              2025-09-19 02:34:25

# DOC> The following query reports the number of invalid objects.
# DOC>
# DOC> If the number is higher than expected, please examine the error
# DOC> messages reported with each object (using SHOW ERRORS) to see if they
# DOC> point to system misconfiguration or resource constraints that must be
# DOC> fixed before attempting to recompile these objects.
# DOC>#

# OBJECTS WITH ERRORS
# -------------------
                  # 0

# DOC> The following query reports the number of exceptions caught during
# DOC> recompilation. If this number is non-zero, please query the error
# DOC> messages in the table UTL_RECOMP_ERRORS to see if any of these errors
# DOC> are due to misconfiguration or resource constraints that must be
# DOC> fixed before objects can compile successfully.
# DOC> Note: Typical compilation errors (due to coding errors) are not
# DOC>       logged into this table: they go into DBA_ERRORS instead.
# DOC>#

# ERRORS DURING RECOMPILATION
# ---------------------------
                          # 0


# Function created.


# PL/SQL procedure successfully completed.


# Function dropped.


# PL/SQL procedure successfully completed.

# SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
# Version 19.28.0.0.0
# Counting invalid objects in PDB: PDB1

# Session altered.


# PDB_NAME             INVALID_OBJECTS
# -------------------- ---------------
# PDB1                               0

# 1 row selected.

# Checking patches applied in last run for PDB: PDB1

# Session altered.

# === Patches applied in last datapatch run for PDB1 ===

# ACTION_TIME                    STATUS     DESCRIPTION
# ------------------------------ ---------- ------------------------------------------------------------
# 19-AUG-25 08.34.00.968406 AM   SUCCESS    Database Release Update : 19.28.0.0.250715 (37960098)

# Checking patches applied in last run for orcl (CDB/Root)...
# === Patches applied in last datapatch run for orcl (CDB/Root) ===

# ACTION_TIME                    STATUS     DESCRIPTION
# ------------------------------ ---------- ------------------------------------------------------------
# 19-AUG-25 07.46.19.998802 AM   SUCCESS    Database Release Update : 19.28.0.0.250715 (37960098)

# ---- Finished orcl ----
# ---- Running datapatch on orcl2 (ORACLE_HOME=/u01/app/oracle/product/19.0.0/db_1) ----
# SQL Patching tool version 19.28.0.0.0 Production on Fri Sep 19 02:34:41 2025
# Copyright (c) 2012, 2025, Oracle.  All rights reserved.

# Log file for this invocation: /u01/app/oracle/cfgtoollogs/sqlpatch/sqlpatch_3419_2025_09_19_02_34_41/sqlpatch_invocation.log

# Connecting to database...OK
# Gathering database info...done

# Note:  Datapatch will only apply or rollback SQL fixes for PDBs
       # that are in an open state, no patches will be applied to closed PDBs.
       # Please refer to Note: Datapatch: Database 12c Post Patch SQL Automation
       # (Doc ID 1585822.1)

# Bootstrapping registry and package to current versions...done
# Error: prereq checks failed!
# verify_queryable_inventory returned ORA-20001: Latest xml inventory is not loaded into table
# Prereq check failed, exiting without installing any patches.

# Please refer to MOS Note 1609718.1 and/or the invocation log
# /u01/app/oracle/cfgtoollogs/sqlpatch/sqlpatch_3419_2025_09_19_02_34_41/sqlpatch_invocation.log
# for information on how to resolve the above errors.

# SQL Patching tool complete on Fri Sep 19 02:35:34 2025
# Datapatch FAILED for orcl2. Check logs.
# ==== Oracle Datapatch Runner finished at Fri Sep 19 02:35:34 EDT 2025 ====

# ==== Summary (node oraclesrv) ====
# Patched successfully:
  # - orcl
# Failed or skipped:
  # - orcl2
# ===============================


